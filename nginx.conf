daemon off;

error_log /dev/stdout info;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen ${RTMP_PORT};
        chunk_size 4000;


        application stream {
            live on;

            # On publish make a request to the api to validate the request
            # /:isVideo true
            on_publish ${API_URL}/on_publish/true;

            # Every minute make a request to the api to check we should still be streaming
            notify_update_timeout 1m;
            on_update ${API_URL}/on_update;

            # When done publishing make a request to the api to 
            on_publish_done ${API_URL}/on_publish_done/true;

            # Split stream - https://gist.github.com/tayvano/6e2d456a9897f55025e25035478a3a50
            exec ffmpeg -loglevel verbose -re -i rtmp://localhost:1935/stream/$name
              -vf scale=w=842:h=480:force_original_aspect_ratio=decrease -c:a aac -ar 48000 -b:a 128k -c:v libx264 -b:v 1000k -g 30 -f flv -r 30 -preset superfast rtmp://localhost:1935/hls-video/$name_480p1128kbs
              -vf scale=w=1280:h=720:force_original_aspect_ratio=decrease -c:a aac -ar 48000 -b:a 192k -c:v libx264 -b:v 2500k -g 30 -f flv -r 30 -preset superfast rtmp://localhost:1935/hls-video/$name_720p2692kbs
              -vf scale=w=1920:h=1080:force_original_aspect_ratio=decrease -c:a aac -ar 48000 -b:a 320k -c:v libx264 -b:v 4000k -g 30 -f flv -r 30 -preset superfast rtmp://localhost:1935/hls-video/$name_1080p4320kbs;

            # disable consuming the stream from nginx as rtmp
            # deny play all;
        }


        application stream-audio {
            live on;

            # On publish make a request to the api to validate the request
            # /:isVideo false
            on_publish ${API_URL}/on_publish/false;

            # Every minute make a request to the api to check we should still be streaming
            notify_update_timeout 1m;
            on_update ${API_URL}/on_update;

            # When done publishing make a request to the api to 
            on_publish_done ${API_URL}/on_publish_done/false;

            # Split stream - https://gist.github.com/tayvano/6e2d456a9897f55025e25035478a3a50
            exec ffmpeg -loglevel verbose -re -i rtmp://localhost:1935/stream-audio/$name
              # Audio
              -vn -c:a libfdk_aac -b:a 320k -vbr 5 -ac 2 -f flv rtmp://localhost:1935/hls-audio/$name_audio;

            # disable consuming the stream from nginx as rtmp
            # deny play all;
        }


        # Video
        application hls-video {
            live on;

            hls on;
            hls_fragment_naming system;
            hls_fragment 5;
            hls_playlist_length 5m;
            hls_cleanup on;
            hls_type live;
            hls_path /data/hls/video;
            hls_nested on;

            hls_variant _1080p4320kbs BANDWIDTH=4320000,RESOLUTION=1920x1080;
            hls_variant _720p2692kbs BANDWIDTH=2692000,RESOLUTION=1280x720;
            hls_variant _480p1128kbs BANDWIDTH=1128000,RESOLUTION=854x480;
        }


        # Audio only
        application hls-audio {
            live on;

            hls on;
            hls_fragment_naming system;
            hls_fragment 5;
            hls_playlist_length 5m;
            hls_cleanup on;
            hls_type live;
            hls_path /data/hls/audio;
            hls_nested on;

            hls_variant _audio BANDWIDTH=320000,CODECS="mp4a.40.2";
        }
    }
}